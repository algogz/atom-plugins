"use strict";
exports.parser = require("raml-1-parser");
var _astProvider = null;
var _editorProvider = null;
var EditorBasedASTProvider = (function () {
    function EditorBasedASTProvider(editorProvider) {
        this.editorProvider = editorProvider;
    }
    EditorBasedASTProvider.prototype.getASTRoot = function () {
        var editor = this.editorProvider.getCurrentEditor();
        if (!editor)
            return null;
        var filePath = editor.getPath();
        var prj = exports.parser.project.createProject(dirname(filePath));
        var offset = editor.getBuffer().characterIndexForPosition(editor.getCursorBufferPosition());
        var text = editor.getBuffer().getText();
        var unit = prj.setCachedUnitContent(basename(filePath), text);
        return unit.highLevel();
    };
    EditorBasedASTProvider.prototype.getSelectedNode = function () {
        var editor = this.editorProvider.getCurrentEditor();
        if (!editor)
            return null;
        var ast = this.getASTRoot();
        if (!ast)
            return null;
        var offset = editor.getBuffer().characterIndexForPosition(editor.getCursorBufferPosition());
        var modifiedOffset = offset;
        var text = editor.getText();
        for (var currentOffset = offset - 1; currentOffset >= 0; currentOffset--) {
            var currentCharacter = text[currentOffset];
            if (currentCharacter == ' ' || currentCharacter == '\t') {
                modifiedOffset = currentOffset - 1;
                continue;
            }
            break;
        }
        var astNode = ast.findElementAtOffset(modifiedOffset);
        if (!astNode) {
            return ast;
        }
        return astNode;
    };
    return EditorBasedASTProvider;
}());
/**
 * Sets AST provider. Must be called to use the module.
 */
function setASTProvider(astProvider) {
    _astProvider = astProvider;
}
exports.setASTProvider = setASTProvider;
/**
 * Sets editor provider. Optional.
 */
function setEditorProvider(editorProvider) {
    _editorProvider = editorProvider;
}
exports.setEditorProvider = setEditorProvider;
function getRootNode() {
    if (_astProvider)
        return _astProvider.getASTRoot();
    if (!_editorProvider)
        return null;
    return (new EditorBasedASTProvider(_editorProvider)).getASTRoot();
}
exports.getRootNode = getRootNode;
function getCurrentNode(position) {
    if (_astProvider) {
        var astProviderSelectedNode = _astProvider.getSelectedNode();
        if (astProviderSelectedNode)
            return astProviderSelectedNode;
        var root = _astProvider.getASTRoot();
        if (root && position != null)
            return root.findElementAtOffset(position);
    }
    if (_editorProvider)
        return (new EditorBasedASTProvider(_editorProvider)).getASTRoot();
    return null;
}
exports.getCurrentNode = getCurrentNode;
function basename(path) {
    var delimiterIndex = -1;
    delimiterIndex = path.lastIndexOf('\\');
    if (delimiterIndex == -1)
        delimiterIndex = path.lastIndexOf('/');
    return delimiterIndex + 1 < path.length ? path.substring(delimiterIndex + 1) : "";
}
function dirname(path) {
    var delimiterIndex = -1;
    delimiterIndex = path.lastIndexOf('\\');
    if (delimiterIndex == -1)
        delimiterIndex = path.lastIndexOf('/');
    return path.substring(0, delimiterIndex - 1);
}
//# sourceMappingURL=tools.js.map