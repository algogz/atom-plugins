export import parser = require("raml-1-parser");
import hl = parser.hl;
export interface IASTProvider {
    getASTRoot(): hl.IHighLevelNode;
    getSelectedNode(): hl.IParseResult;
}
export interface Decorator {
    getIcon(node: hl.IParseResult): string;
    getTextStyle(node: hl.IParseResult): string;
}
export interface LabelProvider {
    getLabelText(node: hl.IParseResult): string;
    getTypeText(node: hl.IParseResult): string;
}
export interface VisibilityFilter {
    (node: hl.IParseResult): boolean;
}
export interface CategoryFilter {
    (node: hl.IParseResult): boolean;
}
export interface KeyProvider {
    (node: hl.IParseResult): string;
}
export interface IPoint {
    row: number;
    column: number;
}
export interface IRange {
    start: IPoint;
    end: IPoint;
}
export interface IEditorTextBuffer {
    positionForCharacterIndex(offset: number): IPoint;
    characterIndexForPosition(position: IPoint): number;
    rangeForRow(row: number, includeNewline?: boolean): IRange;
    getTextInRange(range: IRange): string;
    setTextInRange(range: IRange, text: string, normalizeLineEndings?: boolean): IRange;
    getText(): string;
    getEndPosition(): IPoint;
}
export interface IAbstractTextEditor {
    getText(): string;
    getBuffer(): IEditorTextBuffer;
    getPath(): any;
    getCursorBufferPosition(): IPoint;
    setText(text: string): any;
}
export interface IEditorProvider {
    getCurrentEditor(): IAbstractTextEditor;
}
