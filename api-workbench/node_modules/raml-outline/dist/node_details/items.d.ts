import detailsInterfaces = require("./detailsInterfaces");
import rp = require("raml-1-parser");
import hl = rp.hl;
import lowLevel = rp.ll;
export declare function getDefaultValue(node: hl.IHighLevelNode, property: hl.IProperty): boolean;
export declare function hasDefault(property: hl.IProperty): boolean;
export declare abstract class Item implements detailsInterfaces.DetailsItem {
    private title;
    private description;
    private parent;
    private error;
    constructor(title: string, description?: string);
    needsSeparateLabel(): boolean;
    add(i: Item): void;
    getParent(): detailsInterfaces.DetailsItem;
    setParent(parent: Item): void;
    getRoot(): any;
    setDescription(desc: string): void;
    setTitle(t: string): void;
    item(name: string): Item;
    setError(text: string): void;
    clearErrors(): void;
    getTitle(): string;
    getDescription(): string;
    getError(): string;
    getChildren(): detailsInterfaces.DetailsItem[];
    abstract getType(): detailsInterfaces.DetailsItemType;
    abstract toJSON(): detailsInterfaces.DetailsItemJSON;
}
export declare abstract class PropertyItem extends Item {
    property: hl.IProperty;
    protected node: hl.IHighLevelNode;
    constructor(property: hl.IProperty, node: hl.IHighLevelNode);
    getDefaultValue(): boolean;
    hasDefault(): boolean;
    getValue(): string;
    toJSON(): detailsInterfaces.DetailsValuedItemJSON;
    abstract getType(): detailsInterfaces.DetailsItemType;
}
export declare class Category extends Item {
    _children: Item[];
    add(i: Item): void;
    getChildren(): detailsInterfaces.DetailsItem[];
    plainChildren(): Item[];
    categories(): Item[];
    item(name: string): Item;
    clearErrors(): void;
    update(i: Item): void;
    getType(): detailsInterfaces.DetailsItemType;
    toJSON(): detailsInterfaces.DetailsValuedItemJSON;
}
export declare class TopLevelNode extends Category {
    protected node: hl.IHighLevelNode;
    getType(): detailsInterfaces.DetailsItemType;
    subCategoryByNameOrCreate(name: string): Item;
    addItemToCategory(name: string, it: Item): void;
    constructor(node: hl.IHighLevelNode);
    dispose(): void;
    update(i: Item): void;
}
export declare class StructuredField extends PropertyItem {
    private stvalue;
    getType(): detailsInterfaces.DetailsItemType;
    constructor(pr: hl.IProperty, node: hl.IHighLevelNode, stvalue: hl.IStructuredValue);
    getValue(): string;
    getChildren(): detailsInterfaces.DetailsItem[];
}
export declare class JSONSchemaField extends PropertyItem {
    getType(): detailsInterfaces.DetailsItemType;
    needsSeparateLabel(): boolean;
}
export declare class TreeField extends Item {
    private input;
    private node;
    getType(): detailsInterfaces.DetailsItemType;
    findKeyValue(): {
        key: string;
        value: string;
    };
    getTitle(): string;
    getValue(): string;
    toJSON(): detailsInterfaces.DetailsItemJSON;
    constructor(input: lowLevel.ILowLevelASTNode);
    getChildren(): detailsInterfaces.DetailsItem[];
}
export declare class XMLSchemaField extends PropertyItem {
    getType(): detailsInterfaces.DetailsItemType;
    needsSeparateLabel(): boolean;
}
export declare class SelectBox extends PropertyItem {
    getType(): detailsInterfaces.DetailsItemType;
    calculateOptions(): string[];
    toJSON(): detailsInterfaces.DetailsItemWithOptionsJSON;
}
export declare class TypeSelectBox extends SelectBox {
    getType(): detailsInterfaces.DetailsItemType;
}
export declare var valueOptions: (x: rp.ds.rt.nominalInterfaces.IProperty, node: rp.hl.IHighLevelNode) => string[];
export declare class SimpleMultiEditor extends PropertyItem {
    getType(): detailsInterfaces.DetailsItemType;
    getValue(): string;
}
export declare class CheckBoxField extends PropertyItem {
    getType(): detailsInterfaces.DetailsItemType;
    getValue(): string;
    toUIValue(value: string): any;
}
export declare class MarkdownField extends PropertyItem {
    getType(): detailsInterfaces.DetailsItemType;
    needsSeparateLabel(): boolean;
}
export declare class TypeDisplayItem extends PropertyItem {
    getType(): detailsInterfaces.DetailsItemType;
    constructor(node: hl.IHighLevelNode);
    getTitle(): string;
}
export declare class LowLevelTreeField extends PropertyItem {
    private lowLevel;
    constructor(pr: hl.IProperty, node: hl.IHighLevelNode, lowLevel: lowLevel.ILowLevelASTNode, title?: string);
    getValue(): string;
    getChildren(): detailsInterfaces.DetailsItem[];
    getType(): detailsInterfaces.DetailsItemType;
}
export declare class ExampleField extends PropertyItem {
    property: hl.IProperty;
    protected node: hl.IHighLevelNode;
    private text;
    constructor(property: hl.IProperty, node: hl.IHighLevelNode, text: string, title?: string);
    getType(): detailsInterfaces.DetailsItemType;
}
export declare class XMLExampleField extends PropertyItem {
    property: hl.IProperty;
    protected node: hl.IHighLevelNode;
    private text;
    constructor(property: hl.IProperty, node: hl.IHighLevelNode, text: string, title?: string);
    getType(): detailsInterfaces.DetailsItemType;
}
export declare class AttributeTextField extends PropertyItem {
    property: hl.IProperty;
    protected node: hl.IHighLevelNode;
    constructor(property: hl.IProperty, node: hl.IHighLevelNode);
    getType(): detailsInterfaces.DetailsItemType;
}
