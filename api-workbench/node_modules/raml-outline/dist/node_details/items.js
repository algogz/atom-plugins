"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var detailsInterfaces = require("./detailsInterfaces");
var rp = require("raml-1-parser");
var def = rp.ds;
var search = rp.search;
var _ = require("underscore");
var universe = rp.universes;
var universehelpers = rp.universeHelpers;
function getDefaultValue(node, property) {
    if (property.nameId() === universe.Universe10.TypeDeclaration.properties.required.name) {
        return node.name().indexOf("?") == node.name().length - 1;
    }
}
exports.getDefaultValue = getDefaultValue;
function hasDefault(property) {
    if (property.nameId() === universe.Universe10.TypeDeclaration.properties.required.name) {
        return true;
    }
    return false;
}
exports.hasDefault = hasDefault;
/**
 * Abstract item implementation.
 */
var Item = (function () {
    function Item(title, description) {
        if (description === void 0) { description = ""; }
        this.title = title;
        this.description = description;
    }
    Item.prototype.needsSeparateLabel = function () {
        return false;
    };
    Item.prototype.add = function (i) {
        throw new Error("Not supported");
    };
    Item.prototype.getParent = function () {
        return this.parent;
    };
    Item.prototype.setParent = function (parent) {
        this.parent = parent;
    };
    Item.prototype.getRoot = function () {
        if (this.parent) {
            return this.parent.getRoot();
        }
        return this;
    };
    Item.prototype.setDescription = function (desc) {
        this.description = desc;
    };
    Item.prototype.setTitle = function (t) {
        this.title = t;
    };
    Item.prototype.item = function (name) {
        return null;
    };
    Item.prototype.setError = function (text) {
        this.error = text;
    };
    Item.prototype.clearErrors = function () {
        this.error = null;
    };
    /**
     * Node title.
     */
    Item.prototype.getTitle = function () {
        return this.title;
    };
    /**
     * Node description
     */
    Item.prototype.getDescription = function () {
        return this.description;
    };
    /**
     * Error, associated with the node.
     */
    Item.prototype.getError = function () {
        return this.error;
    };
    /**
     * Node children.
     */
    Item.prototype.getChildren = function () {
        return [];
    };
    return Item;
}());
exports.Item = Item;
/**
 * Item responsible for a single property value.
 */
var PropertyItem = (function (_super) {
    __extends(PropertyItem, _super);
    function PropertyItem(property, node) {
        _super.call(this, property.nameId(), property.description());
        this.property = property;
        this.node = node;
    }
    PropertyItem.prototype.getDefaultValue = function () {
        return getDefaultValue(this.node, this.property);
    };
    PropertyItem.prototype.hasDefault = function () {
        return hasDefault(this.property);
    };
    PropertyItem.prototype.getValue = function () {
        var attr = this.node.attr(this.property.nameId());
        if (attr || this.hasDefault()) {
            var val = attr ? attr.value() : this.getDefaultValue();
            if (val == null) {
                val = "";
            }
            return val;
        }
        return null;
    };
    PropertyItem.prototype.toJSON = function () {
        return {
            title: this.getTitle(),
            description: this.getDescription(),
            type: (this.getType() ? detailsInterfaces.DetailsItemType[this.getType()] : null),
            error: this.getError(),
            children: [],
            valueText: this.getValue()
        };
    };
    return PropertyItem;
}(Item));
exports.PropertyItem = PropertyItem;
/**
 * Complex item, containing several items from a single category.
 */
var Category = (function (_super) {
    __extends(Category, _super);
    function Category() {
        _super.apply(this, arguments);
        this._children = [];
    }
    Category.prototype.add = function (i) {
        i.setParent(this);
        this._children.push(i);
    };
    Category.prototype.getChildren = function () {
        return this._children;
    };
    Category.prototype.plainChildren = function () {
        return this._children.filter(function (x) { return !(x instanceof Category); });
    };
    Category.prototype.categories = function () {
        return this._children.filter(function (x) { return (x instanceof Category); });
    };
    Category.prototype.item = function (name) {
        var it;
        this._children.forEach(function (x) {
            if (x.getTitle() == name) {
                it = x;
            }
            var rr = x.item(name);
            if (rr) {
                it = rr;
            }
        });
        return it;
    };
    Category.prototype.clearErrors = function () {
        this._children.forEach(function (x) { return x.clearErrors(); });
    };
    Category.prototype.update = function (i) {
    };
    Category.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.CATEGORY;
    };
    Category.prototype.toJSON = function () {
        return {
            title: this.getTitle(),
            description: this.getDescription(),
            type: (this.getType() ? detailsInterfaces.DetailsItemType[this.getType()] : null),
            error: this.getError(),
            children: _.map(this.getChildren(), function (child) { return child.toJSON(); }),
            valueText: null
        };
    };
    return Category;
}(Item));
exports.Category = Category;
/**
 * Root item.
 */
var TopLevelNode = (function (_super) {
    __extends(TopLevelNode, _super);
    function TopLevelNode(node) {
        _super.call(this, node.definition().nameId(), node.definition().description());
        this.node = node;
    }
    TopLevelNode.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.ROOT;
    };
    TopLevelNode.prototype.subCategoryByNameOrCreate = function (name) {
        var item = _.find(this.getChildren(), function (x) { return x.getTitle() == name; });
        if (!item) {
            var rs = new Category(name);
            this.add(rs);
            return rs;
        }
        return item;
    };
    TopLevelNode.prototype.addItemToCategory = function (name, it) {
        if (name == null) {
            this._children.push(it);
            it.setParent(this);
            return;
        }
        this.subCategoryByNameOrCreate(name).add(it);
    };
    TopLevelNode.prototype.dispose = function () {
        this.node = null;
    };
    TopLevelNode.prototype.update = function (i) {
        //TODO port update if needed.
    };
    return TopLevelNode;
}(Category));
exports.TopLevelNode = TopLevelNode;
var StructuredField = (function (_super) {
    __extends(StructuredField, _super);
    function StructuredField(pr, node, stvalue) {
        _super.call(this, pr, node);
        this.stvalue = stvalue;
    }
    StructuredField.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.STRUCTURED;
    };
    StructuredField.prototype.getValue = function () {
        return null;
    };
    StructuredField.prototype.getChildren = function () {
        var tree = new TreeField(this.stvalue.lowLevel());
        return [tree];
    };
    return StructuredField;
}(PropertyItem));
exports.StructuredField = StructuredField;
var JSONSchemaField = (function (_super) {
    __extends(JSONSchemaField, _super);
    function JSONSchemaField() {
        _super.apply(this, arguments);
    }
    JSONSchemaField.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.JSONSCHEMA;
    };
    JSONSchemaField.prototype.needsSeparateLabel = function () {
        return true;
    };
    return JSONSchemaField;
}(PropertyItem));
exports.JSONSchemaField = JSONSchemaField;
var TreeField = (function (_super) {
    __extends(TreeField, _super);
    function TreeField(input) {
        _super.call(this, "");
        this.input = input;
        this.node = input;
    }
    TreeField.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.TREE;
    };
    TreeField.prototype.findKeyValue = function () {
        var key = this.node.key();
        var value = this.node.value();
        if (typeof value === 'number' || typeof value === 'boolean') {
            value = "" + value;
        }
        if (typeof value != 'string') {
            value = "";
        }
        if (value.length > 30) {
            value = value.substring(0, 20) + "...";
        }
        if (!key) {
            if (value) {
                key = value;
                value = "";
            }
            else {
                key = "-";
                value = "";
            }
        }
        return { key: key, value: value };
    };
    TreeField.prototype.getTitle = function () {
        return this.findKeyValue().key;
    };
    TreeField.prototype.getValue = function () {
        return this.findKeyValue().value;
    };
    TreeField.prototype.toJSON = function () {
        return {
            title: this.getTitle(),
            description: this.getDescription(),
            type: (this.getType() ? detailsInterfaces.DetailsItemType[this.getType()] : null),
            error: this.getError(),
            children: _.map(this.getChildren(), function (child) { return child.toJSON(); }),
            valueText: this.getValue()
        };
    };
    TreeField.prototype.getChildren = function () {
        return _.map(this.node.children(), function (child) { return new TreeField(child); });
    };
    return TreeField;
}(Item));
exports.TreeField = TreeField;
var XMLSchemaField = (function (_super) {
    __extends(XMLSchemaField, _super);
    function XMLSchemaField() {
        _super.apply(this, arguments);
    }
    XMLSchemaField.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.XMLSCHEMA;
    };
    XMLSchemaField.prototype.needsSeparateLabel = function () {
        return true;
    };
    return XMLSchemaField;
}(PropertyItem));
exports.XMLSchemaField = XMLSchemaField;
var SelectBox = (function (_super) {
    __extends(SelectBox, _super);
    function SelectBox() {
        _super.apply(this, arguments);
    }
    SelectBox.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.SELECTBOX;
    };
    SelectBox.prototype.calculateOptions = function () {
        var options = exports.valueOptions(this.property, this.node);
        var a = this.node.attr(this.property.nameId());
        if (a) {
            if (!_.find(options, function (x) { return x == a.value(); })) {
                options.push(a.value());
            }
        }
        if (!this.property.isRequired() && !this.property.getAdapter(def.RAMLPropertyService).isKey()) {
            options = [""].concat(options);
        }
        return options;
    };
    SelectBox.prototype.toJSON = function () {
        var superResults = _super.prototype.toJSON.call(this);
        var results = superResults;
        results.options = this.calculateOptions();
        return results;
    };
    return SelectBox;
}(PropertyItem));
exports.SelectBox = SelectBox;
var TypeSelectBox = (function (_super) {
    __extends(TypeSelectBox, _super);
    function TypeSelectBox() {
        _super.apply(this, arguments);
    }
    TypeSelectBox.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.TYPESELECT;
    };
    return TypeSelectBox;
}(SelectBox));
exports.TypeSelectBox = TypeSelectBox;
exports.valueOptions = function (x, node) {
    var vls = search.enumValues(x, node);
    if (universehelpers.isNameProperty(x)) {
        if (node.definition().isAssignableFrom(universe.Universe10.TypeDeclaration.name)) {
            if (node.property() && universehelpers.isBodyProperty(node.property())) {
                if (!(node.property() instanceof def.UserDefinedProp)) {
                    if (node.parent() &&
                        universehelpers.isMethodType(node.parent().definition())) {
                        return ["application/json", "application/xml", "multipart/form-data", "application/x-www-form-urlencoded"];
                    }
                    return ["application/json", "application/xml"];
                }
            }
        }
    }
    if ((!vls) || vls.length == 0) {
        var sug = x.suggester();
        if (sug) {
            vls = sug(node);
        }
        if ((!vls) || vls.length == 0) {
            vls = x.getOftenKeys();
        }
    }
    return _.unique(vls);
};
function escapeValue(v) {
    if (v.length > 0) {
        if (v.charAt(0) == "'") {
            return '"' + v + '"';
        }
        if (v.charAt(0) == '"') {
            return '"' + v + '"';
        }
    }
    if (v.indexOf(' ') != -1 || v.indexOf(',') != -1) {
        if (v.indexOf('"') == -1) {
            return '"' + v + '"';
        }
        if (v.indexOf("'") == -1) {
            return "'" + v + "'";
        }
    }
    return v;
}
var SimpleMultiEditor = (function (_super) {
    __extends(SimpleMultiEditor, _super);
    function SimpleMultiEditor() {
        _super.apply(this, arguments);
    }
    SimpleMultiEditor.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.MULTIEDITOR;
    };
    SimpleMultiEditor.prototype.getValue = function () {
        var attrs = this.node.attributes(this.property.nameId());
        return attrs.map(function (x) { return escapeValue("" + x.value()); }).join(", ");
    };
    return SimpleMultiEditor;
}(PropertyItem));
exports.SimpleMultiEditor = SimpleMultiEditor;
var CheckBoxField = (function (_super) {
    __extends(CheckBoxField, _super);
    function CheckBoxField() {
        _super.apply(this, arguments);
    }
    CheckBoxField.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.CHECKBOX;
    };
    CheckBoxField.prototype.getValue = function () {
        return "" + this.toUIValue(_super.prototype.getValue.call(this));
    };
    CheckBoxField.prototype.toUIValue = function (value) {
        if (!value) {
            return false;
        }
        if (value === true || value.trim() === 'true') {
            return true;
        }
        return false;
    };
    return CheckBoxField;
}(PropertyItem));
exports.CheckBoxField = CheckBoxField;
var MarkdownField = (function (_super) {
    __extends(MarkdownField, _super);
    function MarkdownField() {
        _super.apply(this, arguments);
    }
    MarkdownField.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.MARKDOWN;
    };
    MarkdownField.prototype.needsSeparateLabel = function () {
        return true;
    };
    return MarkdownField;
}(PropertyItem));
exports.MarkdownField = MarkdownField;
var TypeDisplayItem = (function (_super) {
    __extends(TypeDisplayItem, _super);
    function TypeDisplayItem(node) {
        _super.call(this, node.definition().property("type"), node);
    }
    TypeDisplayItem.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.TYPEDISPLAY;
    };
    TypeDisplayItem.prototype.getTitle = function () {
        return "Type";
    };
    return TypeDisplayItem;
}(PropertyItem));
exports.TypeDisplayItem = TypeDisplayItem;
var LowLevelTreeField = (function (_super) {
    __extends(LowLevelTreeField, _super);
    function LowLevelTreeField(pr, node, lowLevel, title) {
        _super.call(this, pr, node);
        this.lowLevel = lowLevel;
        if (title)
            this.setTitle(title);
    }
    LowLevelTreeField.prototype.getValue = function () {
        return null;
    };
    LowLevelTreeField.prototype.getChildren = function () {
        var tree = new TreeField(this.lowLevel);
        return [tree];
    };
    LowLevelTreeField.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.TREE;
    };
    return LowLevelTreeField;
}(PropertyItem));
exports.LowLevelTreeField = LowLevelTreeField;
var ExampleField = (function (_super) {
    __extends(ExampleField, _super);
    function ExampleField(property, node, text, title) {
        _super.call(this, property, node);
        this.property = property;
        this.node = node;
        this.text = text;
        this.setDescription("");
        if (title)
            this.setTitle(title);
    }
    ExampleField.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.JSONEXAMPLE;
    };
    return ExampleField;
}(PropertyItem));
exports.ExampleField = ExampleField;
var XMLExampleField = (function (_super) {
    __extends(XMLExampleField, _super);
    function XMLExampleField(property, node, text, title) {
        _super.call(this, property, node);
        this.property = property;
        this.node = node;
        this.text = text;
        this.setDescription("");
        if (title)
            this.setTitle(title);
    }
    XMLExampleField.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.XMLEXAMPLE;
    };
    return XMLExampleField;
}(PropertyItem));
exports.XMLExampleField = XMLExampleField;
var AttributeTextField = (function (_super) {
    __extends(AttributeTextField, _super);
    function AttributeTextField(property, node) {
        _super.call(this, property, node);
        this.property = property;
        this.node = node;
    }
    AttributeTextField.prototype.getType = function () {
        return detailsInterfaces.DetailsItemType.ATTRIBUTETEXT;
    };
    return AttributeTextField;
}(PropertyItem));
exports.AttributeTextField = AttributeTextField;
//# sourceMappingURL=items.js.map